{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Discover CEP O que n\u00f3s somos? Uma aplica\u00e7\u00e3o web que porporciona a descorbeta de endere\u00e7os a partir de CEPs. Membros: Nome Github J\u00falio C\u00e9sar Schneider Martins @jschneiderm98","title":"In\u00edcio"},{"location":"#discover-cep","text":"","title":"Discover CEP"},{"location":"#o-que-nos-somos","text":"Uma aplica\u00e7\u00e3o web que porporciona a descorbeta de endere\u00e7os a partir de CEPs.","title":"O que n\u00f3s somos?"},{"location":"#membros","text":"Nome Github J\u00falio C\u00e9sar Schneider Martins @jschneiderm98","title":"Membros:"},{"location":"documento-de-arquitetura/","text":"Documento de arquitetura Objetivos Este artefato tem o objetivo de fornecer uma vis\u00e3o geral da arquitetura do DiscoverCEP. Apresenta v\u00e1rias visualiza\u00e7\u00f5es de arquitetura para descrever os diferentes aspectos do sistema. Escopo O DiscorverCEP \u00e9 uma aplica\u00e7\u00e3o web que proporciona a descoberta de endere\u00e7os a partir do CEP. Representa\u00e7\u00e3o arquitetural Implementa\u00e7\u00e3o O modelo de arquitetura proposto no projeto \u00e9 um modelo multicamadas, sendo composto por tr\u00eas camadas principais: Vis\u00e3o: camada em que os dados s\u00e3o visualizados a partir de uma interface gr\u00e1fica implementada. Controladora: camada em que h\u00e1 o tratamento e interpreta\u00e7\u00e3o dos eventos gerados por dispositivos de entrada. Modelo: camada que h\u00e1 persist\u00eancia dos dados, sendo composta pelo banco de dados. A comunica\u00e7\u00e3o entre as camadas \u00e9 feita pelo modelo de arquitetura cliente-servidor. O servidor \u00e9 respons\u00e1vel pela camada intermedi\u00e1ria (Controladora), sendo respons\u00e1vel por lidar como a camada de persist\u00eancia(Modelo), que fornece os dados para a manipula\u00e7\u00e3o, e com a camada de visualiza\u00e7\u00e3o (Vis\u00e3o), que representa por meio da interface gr\u00e1fica os dados manipulados, no qual s\u00e3o requisitados por meio do protocolo de comunica\u00e7\u00e3o \u2018http\u2019 com as outras camadas, e \u00e9 utilizado JSON como a estrutura das informa\u00e7\u00f5es sendo transmitidas. O usu\u00e1rio neste modelo realiza as requisi\u00e7\u00f5es interagindo com a interface gr\u00e1fica. Node.js: Pode ser definido com um ambiente de execu\u00e7\u00e3o Javascript server-side, sendo poss\u00edvel rodar uma aplica\u00e7\u00e3o standalone em uma m\u00e1quina, n\u00e3o dependendo de um browser para a execu\u00e7\u00e3o. ReactJS: Biblioteca JavaScript com foco em criar interfaces de usu\u00e1rios em p\u00e1ginas web. Express JS: Framework para Node.js, utilizado no back-end para o gerenciamento de rotas, middleware e de outras fun\u00e7\u00f5es, facilitando a cria\u00e7\u00e3o de API 's. Sendo respons\u00e1vel por realizar a conex\u00e3o entre as camadas de persist\u00eancia e de controle com a camada de vis\u00e3o. Knex: \u00c9 um construtor de requisi\u00e7\u00f5es para banco de dados com o modelo relacional(SQL). PostgreSQL: O banco de dados escolhido para o projeto. Back-end Rotas do backend /v1/consulta/:cep Estrutura de pacotes do back-end. src Cont\u00e9m os arquivos de c\u00f3digo fonte do back-end. src/knexfile.ts Cont\u00e9m as configura\u00e7\u00f5es da conex\u00e3o entre o banco de dados e a aplica\u00e7\u00e3o. src/server.ts Habilita\u00e7\u00e3o das vari\u00e1veis de ambiente, e ativa\u00e7\u00e3o do back-end em uma porta. O \"in\u00edcio\" da aplica\u00e7\u00e3o. src/app.ts Habilita\u00e7\u00e3o de middlewares padr\u00e3o \u00e0 todas as rotas da aplica\u00e7\u00e3o, al\u00e9m da cria\u00e7\u00e3o de rotas bases para os end-points. src/database Cont\u00e9m as l\u00f3gicas de intera\u00e7\u00e3o com o banco de dados, al\u00e9m disso a conex\u00e3o com o banco de dados no arquivo KnexConnection.ts . Os c\u00f3digo fonte dessa pasta utilizam o Knex para essa intera\u00e7\u00e3o. src/database/migrations Cont\u00e9m as l\u00f3gicas de cria\u00e7\u00e3o e exclus\u00e3o de tabelas no banco dados de dados, chamadas de migrations. A ativa\u00e7\u00e3o dessas tabelas \u00e9 feita por meio do terminal utilizando yarn knex migrate:latest , foi criado um script no yarn que simplifica o comando yarn knex:migrate , ainda as migrations s\u00e3o rodadas automaticamente ao subir os cont\u00eaineres com o docker-compose. src/database/seeds Cont\u00e9m arquivos para popula\u00e7\u00e3o inicial do banco, utilizado principalmente para testes. A ativa\u00e7\u00e3o dessas tabelas \u00e9 feita por meio do terminal utilizando yarn knex seed:run , foi criado um script no yarn que simplifica o comando yarn knex:seed . As seeds s\u00e3o inseridas automaticamente ao subir o container. src/controllers Cont\u00e9m as l\u00f3gicas de inser\u00e7\u00e3o e atualiza\u00e7\u00e3o de dados em tabelas, al\u00e9m de certas valida\u00e7\u00f5es de dados simples. Os erros gerados nas controllers s\u00e3o tanto erros relacionados a essas valida\u00e7\u00f5es como erros de opera\u00e7\u00f5es no banco de dados. src/routes Cria\u00e7\u00e3o das rotas de cada end-point, a partir da rota s\u00e3o chamadas as controllers requiridas, al\u00e9m dos middlewares de valida\u00e7\u00e3o. src/validations Cont\u00e9m os middlewares de valida\u00e7\u00e3o de requisi\u00e7\u00e3o e de autoriza\u00e7\u00e3o. tests Cont\u00e9m os testes do back-end. Front-end Estrutura de pacotes front-end. src Cont\u00e9m os arquivos de c\u00f3digo fonte do front-end. src/index.tsx P\u00e1gina que realiza a inser\u00e7\u00e3o do javascript no elemento raiz do HTML, o \"in\u00edcio\" da aplica\u00e7\u00e3o. src/App.tsx Cont\u00e9m o elemento de roteamento da react-router-dom e os provedores de contexto mais externos ao c\u00f3digo. src/services Concentra as l\u00f3gicas de acesso \u00e0s APIs tanto do back-end quanto APIs externas. src/contexts Cont\u00e9m os contextos de informa\u00e7\u00f5es utilizadas em m\u00faltiplas p\u00e1ginas, como por exemplo, informa\u00e7\u00f5es b\u00e1sicas de um usu\u00e1rio logado. src/tools Cont\u00e9m l\u00f3gicas simples que auxiliam a formatar dados, como por exemplos, conversores de datas em string. src/assets Cont\u00e9m imagens e \u00edcones utilizados na aplica\u00e7\u00e3o al\u00e9m de estilos CSS globais. src/routes Cont\u00e9m l\u00f3gicas relacionadas ao roteamento da aplica\u00e7\u00e3o, selecionando qual component inserir de acordo com o URL, e tamb\u00e9m lida com a quest\u00e3o de autentica\u00e7\u00e3o. src/components Cont\u00e9m os componentes React criados. src/components/Layouts Cont\u00e9m componentes que formam layouts de p\u00e1ginas. src/components/IndividualComponents Cont\u00e9m componentes individuais que n\u00e3o formam um layout src/components/Forms Cont\u00e9m componentes de formul\u00e1rios, utilizando o Formik. Diferente de outros componentes h\u00e1 um arquivo a mais nas pasta dos componentes, que \u00e9 o arquivo formSettings.ts , que cont\u00e9m a l\u00f3gica de estado, valida\u00e7\u00e3o e submit dos formul\u00e1rios Formik. Banco de dados Modelagem da estrutura do banco de dados Metas e restri\u00e7\u00f5es arquiteturais Metas Desacoplamento: A separa\u00e7\u00e3o do software em duas frentes: interface de usu\u00e1rio (front-end) e API (back-end), facilitar\u00e1 para a equipe de desenvolvimento a divis\u00e3o de tarefas necess\u00e1rias para a constru\u00e7\u00e3o do software. Al\u00e9m disso, permite escolher as melhores solu\u00e7\u00f5es tecnol\u00f3gicas para a implementa\u00e7\u00e3o de cada frente. Al\u00e9m disso, no front-end deve-se priorizar a componentiza\u00e7\u00e3o. Qualidade Na interface de usu\u00e1rio, a utiliza\u00e7\u00e3o do React permitir\u00e1 que o desenvolvimento seja realizado de forma eficiente e componentizado, com facilidade de integra\u00e7\u00e3o com outras bibliotecas e servi\u00e7os. No back-end, deve-se garantir a separa\u00e7\u00e3o do acesso ao banco de dados de outras l\u00f3gicas associadas ao backend. Haver\u00e1 a utiliza\u00e7\u00e3o do Sonar Cloud para avalia\u00e7\u00e3o da qualidade de c\u00f3digo al\u00e9m da utiliza\u00e7\u00e3o do CodeCov para avalia\u00e7\u00e3o da cobertura de c\u00f3digo, ambos dentro da pipeline de CI utlizando o github actions. Hist\u00f3rico de vers\u00e3o Data Vers\u00e3o Descri\u00e7\u00e3o Autor 20/05/2021 0.1 Cria\u00e7\u00e3o do documento J\u00falio C\u00e9sar Schneider Martins 24/05/2021 1.0 Finaliza\u00e7\u00e3o do documento J\u00falio C\u00e9sar Schneider Martins","title":"Documento de Arquitetura"},{"location":"documento-de-arquitetura/#documento-de-arquitetura","text":"","title":"Documento de arquitetura"},{"location":"documento-de-arquitetura/#objetivos","text":"Este artefato tem o objetivo de fornecer uma vis\u00e3o geral da arquitetura do DiscoverCEP. Apresenta v\u00e1rias visualiza\u00e7\u00f5es de arquitetura para descrever os diferentes aspectos do sistema.","title":"Objetivos"},{"location":"documento-de-arquitetura/#escopo","text":"O DiscorverCEP \u00e9 uma aplica\u00e7\u00e3o web que proporciona a descoberta de endere\u00e7os a partir do CEP.","title":"Escopo"},{"location":"documento-de-arquitetura/#representacao-arquitetural","text":"","title":"Representa\u00e7\u00e3o arquitetural"},{"location":"documento-de-arquitetura/#implementacao","text":"O modelo de arquitetura proposto no projeto \u00e9 um modelo multicamadas, sendo composto por tr\u00eas camadas principais: Vis\u00e3o: camada em que os dados s\u00e3o visualizados a partir de uma interface gr\u00e1fica implementada. Controladora: camada em que h\u00e1 o tratamento e interpreta\u00e7\u00e3o dos eventos gerados por dispositivos de entrada. Modelo: camada que h\u00e1 persist\u00eancia dos dados, sendo composta pelo banco de dados. A comunica\u00e7\u00e3o entre as camadas \u00e9 feita pelo modelo de arquitetura cliente-servidor. O servidor \u00e9 respons\u00e1vel pela camada intermedi\u00e1ria (Controladora), sendo respons\u00e1vel por lidar como a camada de persist\u00eancia(Modelo), que fornece os dados para a manipula\u00e7\u00e3o, e com a camada de visualiza\u00e7\u00e3o (Vis\u00e3o), que representa por meio da interface gr\u00e1fica os dados manipulados, no qual s\u00e3o requisitados por meio do protocolo de comunica\u00e7\u00e3o \u2018http\u2019 com as outras camadas, e \u00e9 utilizado JSON como a estrutura das informa\u00e7\u00f5es sendo transmitidas. O usu\u00e1rio neste modelo realiza as requisi\u00e7\u00f5es interagindo com a interface gr\u00e1fica. Node.js: Pode ser definido com um ambiente de execu\u00e7\u00e3o Javascript server-side, sendo poss\u00edvel rodar uma aplica\u00e7\u00e3o standalone em uma m\u00e1quina, n\u00e3o dependendo de um browser para a execu\u00e7\u00e3o. ReactJS: Biblioteca JavaScript com foco em criar interfaces de usu\u00e1rios em p\u00e1ginas web. Express JS: Framework para Node.js, utilizado no back-end para o gerenciamento de rotas, middleware e de outras fun\u00e7\u00f5es, facilitando a cria\u00e7\u00e3o de API 's. Sendo respons\u00e1vel por realizar a conex\u00e3o entre as camadas de persist\u00eancia e de controle com a camada de vis\u00e3o. Knex: \u00c9 um construtor de requisi\u00e7\u00f5es para banco de dados com o modelo relacional(SQL). PostgreSQL: O banco de dados escolhido para o projeto.","title":"Implementa\u00e7\u00e3o"},{"location":"documento-de-arquitetura/#back-end","text":"Rotas do backend /v1/consulta/:cep Estrutura de pacotes do back-end. src Cont\u00e9m os arquivos de c\u00f3digo fonte do back-end. src/knexfile.ts Cont\u00e9m as configura\u00e7\u00f5es da conex\u00e3o entre o banco de dados e a aplica\u00e7\u00e3o. src/server.ts Habilita\u00e7\u00e3o das vari\u00e1veis de ambiente, e ativa\u00e7\u00e3o do back-end em uma porta. O \"in\u00edcio\" da aplica\u00e7\u00e3o. src/app.ts Habilita\u00e7\u00e3o de middlewares padr\u00e3o \u00e0 todas as rotas da aplica\u00e7\u00e3o, al\u00e9m da cria\u00e7\u00e3o de rotas bases para os end-points. src/database Cont\u00e9m as l\u00f3gicas de intera\u00e7\u00e3o com o banco de dados, al\u00e9m disso a conex\u00e3o com o banco de dados no arquivo KnexConnection.ts . Os c\u00f3digo fonte dessa pasta utilizam o Knex para essa intera\u00e7\u00e3o. src/database/migrations Cont\u00e9m as l\u00f3gicas de cria\u00e7\u00e3o e exclus\u00e3o de tabelas no banco dados de dados, chamadas de migrations. A ativa\u00e7\u00e3o dessas tabelas \u00e9 feita por meio do terminal utilizando yarn knex migrate:latest , foi criado um script no yarn que simplifica o comando yarn knex:migrate , ainda as migrations s\u00e3o rodadas automaticamente ao subir os cont\u00eaineres com o docker-compose. src/database/seeds Cont\u00e9m arquivos para popula\u00e7\u00e3o inicial do banco, utilizado principalmente para testes. A ativa\u00e7\u00e3o dessas tabelas \u00e9 feita por meio do terminal utilizando yarn knex seed:run , foi criado um script no yarn que simplifica o comando yarn knex:seed . As seeds s\u00e3o inseridas automaticamente ao subir o container. src/controllers Cont\u00e9m as l\u00f3gicas de inser\u00e7\u00e3o e atualiza\u00e7\u00e3o de dados em tabelas, al\u00e9m de certas valida\u00e7\u00f5es de dados simples. Os erros gerados nas controllers s\u00e3o tanto erros relacionados a essas valida\u00e7\u00f5es como erros de opera\u00e7\u00f5es no banco de dados. src/routes Cria\u00e7\u00e3o das rotas de cada end-point, a partir da rota s\u00e3o chamadas as controllers requiridas, al\u00e9m dos middlewares de valida\u00e7\u00e3o. src/validations Cont\u00e9m os middlewares de valida\u00e7\u00e3o de requisi\u00e7\u00e3o e de autoriza\u00e7\u00e3o. tests Cont\u00e9m os testes do back-end.","title":"Back-end"},{"location":"documento-de-arquitetura/#front-end","text":"Estrutura de pacotes front-end. src Cont\u00e9m os arquivos de c\u00f3digo fonte do front-end. src/index.tsx P\u00e1gina que realiza a inser\u00e7\u00e3o do javascript no elemento raiz do HTML, o \"in\u00edcio\" da aplica\u00e7\u00e3o. src/App.tsx Cont\u00e9m o elemento de roteamento da react-router-dom e os provedores de contexto mais externos ao c\u00f3digo. src/services Concentra as l\u00f3gicas de acesso \u00e0s APIs tanto do back-end quanto APIs externas. src/contexts Cont\u00e9m os contextos de informa\u00e7\u00f5es utilizadas em m\u00faltiplas p\u00e1ginas, como por exemplo, informa\u00e7\u00f5es b\u00e1sicas de um usu\u00e1rio logado. src/tools Cont\u00e9m l\u00f3gicas simples que auxiliam a formatar dados, como por exemplos, conversores de datas em string. src/assets Cont\u00e9m imagens e \u00edcones utilizados na aplica\u00e7\u00e3o al\u00e9m de estilos CSS globais. src/routes Cont\u00e9m l\u00f3gicas relacionadas ao roteamento da aplica\u00e7\u00e3o, selecionando qual component inserir de acordo com o URL, e tamb\u00e9m lida com a quest\u00e3o de autentica\u00e7\u00e3o. src/components Cont\u00e9m os componentes React criados. src/components/Layouts Cont\u00e9m componentes que formam layouts de p\u00e1ginas. src/components/IndividualComponents Cont\u00e9m componentes individuais que n\u00e3o formam um layout src/components/Forms Cont\u00e9m componentes de formul\u00e1rios, utilizando o Formik. Diferente de outros componentes h\u00e1 um arquivo a mais nas pasta dos componentes, que \u00e9 o arquivo formSettings.ts , que cont\u00e9m a l\u00f3gica de estado, valida\u00e7\u00e3o e submit dos formul\u00e1rios Formik.","title":"Front-end"},{"location":"documento-de-arquitetura/#banco-de-dados","text":"Modelagem da estrutura do banco de dados","title":"Banco de dados"},{"location":"documento-de-arquitetura/#metas-e-restricoes-arquiteturais","text":"","title":"Metas e restri\u00e7\u00f5es arquiteturais"},{"location":"documento-de-arquitetura/#metas","text":"Desacoplamento: A separa\u00e7\u00e3o do software em duas frentes: interface de usu\u00e1rio (front-end) e API (back-end), facilitar\u00e1 para a equipe de desenvolvimento a divis\u00e3o de tarefas necess\u00e1rias para a constru\u00e7\u00e3o do software. Al\u00e9m disso, permite escolher as melhores solu\u00e7\u00f5es tecnol\u00f3gicas para a implementa\u00e7\u00e3o de cada frente. Al\u00e9m disso, no front-end deve-se priorizar a componentiza\u00e7\u00e3o.","title":"Metas"},{"location":"documento-de-arquitetura/#qualidade","text":"Na interface de usu\u00e1rio, a utiliza\u00e7\u00e3o do React permitir\u00e1 que o desenvolvimento seja realizado de forma eficiente e componentizado, com facilidade de integra\u00e7\u00e3o com outras bibliotecas e servi\u00e7os. No back-end, deve-se garantir a separa\u00e7\u00e3o do acesso ao banco de dados de outras l\u00f3gicas associadas ao backend. Haver\u00e1 a utiliza\u00e7\u00e3o do Sonar Cloud para avalia\u00e7\u00e3o da qualidade de c\u00f3digo al\u00e9m da utiliza\u00e7\u00e3o do CodeCov para avalia\u00e7\u00e3o da cobertura de c\u00f3digo, ambos dentro da pipeline de CI utlizando o github actions.","title":"Qualidade"},{"location":"documento-de-arquitetura/#historico-de-versao","text":"Data Vers\u00e3o Descri\u00e7\u00e3o Autor 20/05/2021 0.1 Cria\u00e7\u00e3o do documento J\u00falio C\u00e9sar Schneider Martins 24/05/2021 1.0 Finaliza\u00e7\u00e3o do documento J\u00falio C\u00e9sar Schneider Martins","title":"Hist\u00f3rico de vers\u00e3o"}]}